-- DIAGNOSTIC COMPLET POUR PHYSICAL_CARD_REQUESTS
-- Ce script va identifier EXACTEMENT d'o√π vient le probl√®me

-- ========================================
-- 1. V√âRIFICATION DE L'EXISTENCE DE LA TABLE
-- ========================================
DO $$
BEGIN
    RAISE NOTICE '=== 1. V√âRIFICATION TABLE ===';
END $$;

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = 'physical_card_requests' 
            AND table_schema = 'public'
        ) THEN '‚úÖ TABLE EXISTS'
        ELSE '‚ùå TABLE DOES NOT EXIST'
    END as table_status;

-- ========================================
-- 2. STRUCTURE DE LA TABLE (si elle existe)
-- ========================================
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'physical_card_requests') THEN
        RAISE NOTICE '=== 2. STRUCTURE DE LA TABLE ===';
    END IF;
END $$;

SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default,
    CASE 
        WHEN column_name IN ('email', 'card_identifier') THEN '‚ö†Ô∏è  ANCIENNE COLONNE (√† supprimer)'
        WHEN column_name = 'affiliate_code' THEN '‚úÖ NOUVELLE COLONNE'
        ELSE 'üìã COLONNE STANDARD'
    END as column_status
FROM information_schema.columns 
WHERE table_name = 'physical_card_requests' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- ========================================
-- 3. STATUT RLS ET POLITIQUES
-- ========================================
DO $$
BEGIN
    RAISE NOTICE '=== 3. S√âCURIT√â RLS ===';
END $$;

-- Statut RLS
SELECT 
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity = true THEN '‚ö†Ô∏è  RLS ACTIV√â (peut bloquer l''acc√®s)'
        WHEN rowsecurity = false THEN '‚úÖ RLS D√âSACTIV√â (acc√®s libre)'
        ELSE '‚ùì STATUT INCONNU'
    END as rls_status
FROM pg_tables 
WHERE tablename = 'physical_card_requests';

-- Politiques existantes
SELECT 
    policyname,
    permissive,
    roles,
    cmd,
    CASE 
        WHEN roles = '{authenticated}' THEN '‚úÖ POUR UTILISATEURS AUTHENTIFI√âS'
        WHEN roles = '{service_role}' THEN 'üîß POUR SERVICE ROLE'
        ELSE '‚ùì R√îLES: ' || array_to_string(roles, ', ')
    END as role_info,
    CASE 
        WHEN qual = 'true' THEN '‚úÖ ACC√àS LIBRE (USING true)'
        WHEN qual LIKE '%auth.uid()%' THEN 'üîí ACC√àS RESTREINT (par user_id)'
        ELSE '‚ùì CONDITION: ' || COALESCE(qual, 'NULL')
    END as access_condition
FROM pg_policies 
WHERE tablename = 'physical_card_requests'
ORDER BY policyname;

-- ========================================
-- 4. TEST D'ACC√àS DIRECT
-- ========================================
DO $$
DECLARE
    record_count integer;
    access_error text;
BEGIN
    RAISE NOTICE '=== 4. TEST D''ACC√àS ===';
    
    BEGIN
        SELECT COUNT(*) INTO record_count FROM physical_card_requests;
        RAISE NOTICE '‚úÖ SELECT r√©ussi - % enregistrements trouv√©s', record_count;
    EXCEPTION 
        WHEN insufficient_privilege THEN
            RAISE NOTICE '‚ùå ERREUR: Permission refus√©e (403)';
            RAISE NOTICE 'üîß SOLUTION: D√©sactiver RLS ou ajouter politique permissive';
        WHEN undefined_table THEN
            RAISE NOTICE '‚ùå ERREUR: Table n''existe pas';
            RAISE NOTICE 'üîß SOLUTION: Cr√©er la table avec le script de cr√©ation';
        WHEN OTHERS THEN
            GET STACKED DIAGNOSTICS access_error = MESSAGE_TEXT;
            RAISE NOTICE '‚ùå ERREUR INCONNUE: %', access_error;
    END;
END $$;

-- ========================================
-- 5. V√âRIFICATION DES PERMISSIONS UTILISATEUR
-- ========================================
DO $$
BEGIN
    RAISE NOTICE '=== 5. PERMISSIONS UTILISATEUR ===';
END $$;

-- R√¥le actuel
SELECT 
    current_user as current_user_role,
    session_user as session_user_role,
    CASE 
        WHEN current_user = 'postgres' THEN 'üîë SUPER ADMIN'
        WHEN current_user LIKE '%service_role%' THEN 'üîß SERVICE ROLE'
        WHEN current_user = 'authenticated' THEN 'üë§ UTILISATEUR AUTHENTIFI√â'
        ELSE '‚ùì R√îLE: ' || current_user
    END as role_type;

-- ========================================
-- 6. DIAGNOSTIC AUTOMATIQUE ET SOLUTIONS
-- ========================================
DO $$
DECLARE
    table_exists boolean;
    rls_enabled boolean;
    policy_count integer;
    has_permissive_policy boolean;
BEGIN
    RAISE NOTICE '=== 6. DIAGNOSTIC AUTOMATIQUE ===';
    
    -- V√©rifications
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'physical_card_requests' AND table_schema = 'public'
    ) INTO table_exists;
    
    SELECT COALESCE(rowsecurity, false) 
    FROM pg_tables 
    WHERE tablename = 'physical_card_requests' 
    INTO rls_enabled;
    
    SELECT COUNT(*) 
    FROM pg_policies 
    WHERE tablename = 'physical_card_requests' 
    INTO policy_count;
    
    SELECT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'physical_card_requests' 
        AND qual = 'true'
    ) INTO has_permissive_policy;
    
    -- Diagnostic
    IF NOT table_exists THEN
        RAISE NOTICE 'üö® PROBL√àME: Table n''existe pas';
        RAISE NOTICE 'üí° SOLUTION: Ex√©cuter le script de cr√©ation de table';
        
    ELSIF rls_enabled AND policy_count = 0 THEN
        RAISE NOTICE 'üö® PROBL√àME: RLS activ√© mais aucune politique';
        RAISE NOTICE 'üí° SOLUTION 1: ALTER TABLE physical_card_requests DISABLE ROW LEVEL SECURITY;';
        RAISE NOTICE 'üí° SOLUTION 2: Cr√©er une politique permissive';
        
    ELSIF rls_enabled AND NOT has_permissive_policy THEN
        RAISE NOTICE 'üö® PROBL√àME: RLS activ√© avec politiques restrictives';
        RAISE NOTICE 'üí° SOLUTION 1: ALTER TABLE physical_card_requests DISABLE ROW LEVEL SECURITY;';
        RAISE NOTICE 'üí° SOLUTION 2: Cr√©er politique: CREATE POLICY "allow_all" ON physical_card_requests FOR ALL USING (true);';
        
    ELSE
        RAISE NOTICE '‚úÖ CONFIGURATION: Semble correcte';
        RAISE NOTICE 'üîç V√âRIFIER: Permissions au niveau application/frontend';
    END IF;
    
    RAISE NOTICE '=== R√âSUM√â ===';
    RAISE NOTICE 'Table existe: %', CASE WHEN table_exists THEN 'OUI' ELSE 'NON' END;
    RAISE NOTICE 'RLS activ√©: %', CASE WHEN rls_enabled THEN 'OUI' ELSE 'NON' END;
    RAISE NOTICE 'Nombre de politiques: %', policy_count;
    RAISE NOTICE 'Politique permissive: %', CASE WHEN has_permissive_policy THEN 'OUI' ELSE 'NON' END;
END $$;

-- ========================================
-- 7. SCRIPT DE CORRECTION AUTOMATIQUE
-- ========================================
DO $$
BEGIN
    RAISE NOTICE '=== 7. SCRIPT DE CORRECTION ===';
    RAISE NOTICE 'Si le probl√®me persiste, ex√©cutez ces commandes:';
    RAISE NOTICE '';
    RAISE NOTICE '-- Cr√©er la table si elle n''existe pas:';
    RAISE NOTICE 'CREATE TABLE IF NOT EXISTS physical_card_requests (';
    RAISE NOTICE '    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),';
    RAISE NOTICE '    user_id UUID NOT NULL,';
    RAISE NOTICE '    full_name VARCHAR(255) NOT NULL,';
    RAISE NOTICE '    phone VARCHAR(20) NOT NULL,';
    RAISE NOTICE '    membership_tier VARCHAR(20) NOT NULL,';
    RAISE NOTICE '    affiliate_code VARCHAR(24),';
    RAISE NOTICE '    status VARCHAR(30) DEFAULT ''pending_payment'',';
    RAISE NOTICE '    created_at TIMESTAMPTZ DEFAULT NOW()';
    RAISE NOTICE ');';
    RAISE NOTICE '';
    RAISE NOTICE '-- D√©sactiver RLS compl√®tement:';
    RAISE NOTICE 'ALTER TABLE physical_card_requests DISABLE ROW LEVEL SECURITY;';
    RAISE NOTICE '';
    RAISE NOTICE '-- OU cr√©er une politique permissive:';
    RAISE NOTICE 'CREATE POLICY "allow_all_access" ON physical_card_requests FOR ALL USING (true);';
END $$;
